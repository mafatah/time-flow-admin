-- Create fraud_alerts table for storing real-time anti-cheat detection alerts
-- This table stores alerts generated by the desktop agent's anti-cheat detector

CREATE TABLE IF NOT EXISTS public.fraud_alerts (
    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    user_id UUID REFERENCES public.users(id) ON DELETE CASCADE NOT NULL,
    time_log_id UUID REFERENCES public.time_logs(id) ON DELETE CASCADE,
    alert_type TEXT NOT NULL, -- 'HIGH_RISK_FRAUD_DETECTION', 'mouse_jiggling', 'keyboard_patterns', etc.
    severity TEXT NOT NULL CHECK (severity IN ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL')),
    risk_score DECIMAL(5,2) NOT NULL DEFAULT 0 CHECK (risk_score >= 0 AND risk_score <= 100),
    confidence DECIMAL(5,2) DEFAULT 0 CHECK (confidence >= 0 AND confidence <= 100),
    
    -- Alert details and patterns
    suspicious_patterns JSONB DEFAULT '[]',
    detection_details JSONB DEFAULT '{}',
    behavior_analysis JSONB DEFAULT '{}',
    
    -- Context information
    screenshot_context JSONB DEFAULT '{}',
    activity_context JSONB DEFAULT '{}',
    system_context JSONB DEFAULT '{}',
    
    -- Alert management
    is_reviewed BOOLEAN DEFAULT FALSE,
    reviewed_by UUID REFERENCES public.users(id),
    reviewed_at TIMESTAMPTZ,
    review_notes TEXT,
    is_false_positive BOOLEAN DEFAULT FALSE,
    
    -- Timestamps
    detected_at TIMESTAMPTZ NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_fraud_alerts_user_id ON public.fraud_alerts(user_id);
CREATE INDEX IF NOT EXISTS idx_fraud_alerts_detected_at ON public.fraud_alerts(detected_at);
CREATE INDEX IF NOT EXISTS idx_fraud_alerts_severity ON public.fraud_alerts(severity);
CREATE INDEX IF NOT EXISTS idx_fraud_alerts_alert_type ON public.fraud_alerts(alert_type);
CREATE INDEX IF NOT EXISTS idx_fraud_alerts_risk_score ON public.fraud_alerts(risk_score);
CREATE INDEX IF NOT EXISTS idx_fraud_alerts_reviewed ON public.fraud_alerts(is_reviewed);
CREATE INDEX IF NOT EXISTS idx_fraud_alerts_false_positive ON public.fraud_alerts(is_false_positive);

-- Enable RLS
ALTER TABLE public.fraud_alerts ENABLE ROW LEVEL SECURITY;

-- RLS Policies for fraud_alerts
CREATE POLICY "Admins can manage all fraud alerts" ON public.fraud_alerts
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() 
            AND role IN ('admin', 'manager')
        )
    );

CREATE POLICY "Employees can view own fraud alerts" ON public.fraud_alerts
    FOR SELECT USING (auth.uid() = user_id);

-- Allow desktop agent to insert fraud alerts (using service role)
CREATE POLICY "Service role can insert fraud alerts" ON public.fraud_alerts
    FOR INSERT WITH CHECK (true);

-- Function to get recent fraud alerts summary
CREATE OR REPLACE FUNCTION get_fraud_alerts_summary(
    days_back INTEGER DEFAULT 7,
    target_user_id UUID DEFAULT NULL
) RETURNS TABLE (
    user_id UUID,
    user_name TEXT,
    total_alerts INTEGER,
    high_risk_alerts INTEGER,
    critical_alerts INTEGER,
    unreviewed_alerts INTEGER,
    avg_risk_score DECIMAL(5,2),
    latest_alert_at TIMESTAMPTZ,
    most_common_type TEXT
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        fa.user_id,
        u.full_name as user_name,
        COUNT(fa.id)::INTEGER as total_alerts,
        COUNT(CASE WHEN fa.severity = 'HIGH' THEN 1 END)::INTEGER as high_risk_alerts,
        COUNT(CASE WHEN fa.severity = 'CRITICAL' THEN 1 END)::INTEGER as critical_alerts,
        COUNT(CASE WHEN NOT fa.is_reviewed THEN 1 END)::INTEGER as unreviewed_alerts,
        ROUND(AVG(fa.risk_score), 2) as avg_risk_score,
        MAX(fa.detected_at) as latest_alert_at,
        MODE() WITHIN GROUP (ORDER BY fa.alert_type) as most_common_type
    FROM public.fraud_alerts fa
    JOIN public.users u ON u.id = fa.user_id
    WHERE fa.detected_at >= NOW() - INTERVAL '%s days' USING (days_back)
    AND (target_user_id IS NULL OR fa.user_id = target_user_id)
    AND NOT fa.is_false_positive
    GROUP BY fa.user_id, u.full_name
    ORDER BY total_alerts DESC, avg_risk_score DESC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to create fraud alert notifications
CREATE OR REPLACE FUNCTION create_fraud_alert_notification(
    alert_id UUID
) RETURNS UUID AS $$
DECLARE
    alert_record RECORD;
    notification_id UUID;
    notification_title TEXT;
    notification_message TEXT;
BEGIN
    -- Get alert details
    SELECT * INTO alert_record FROM public.fraud_alerts WHERE id = alert_id;
    
    IF NOT FOUND THEN
        RETURN NULL;
    END IF;
    
    -- Only create notifications for high risk alerts
    IF alert_record.severity NOT IN ('HIGH', 'CRITICAL') THEN
        RETURN NULL;
    END IF;
    
    -- Build notification content
    notification_title := format('ðŸš¨ %s Risk: %s Detected', alert_record.severity, alert_record.alert_type);
    notification_message := format('Anti-cheat system detected suspicious activity with %s%% risk score. Review required.', 
        alert_record.risk_score);
    
    -- Create notification for admins
    INSERT INTO public.notifications (user_id, type, title, message)
    SELECT u.id, 'warning', notification_title, notification_message
    FROM public.users u
    WHERE u.role IN ('admin', 'manager') AND u.is_active = TRUE
    RETURNING id INTO notification_id;
    
    RETURN notification_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Trigger to create notifications for high-risk fraud alerts
CREATE OR REPLACE FUNCTION trigger_fraud_alert_notification()
RETURNS TRIGGER AS $$
BEGIN
    -- Create notification for high/critical risk alerts
    IF NEW.severity IN ('HIGH', 'CRITICAL') THEN
        PERFORM create_fraud_alert_notification(NEW.id);
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER fraud_alert_notification_trigger
    AFTER INSERT ON public.fraud_alerts
    FOR EACH ROW
    EXECUTE FUNCTION trigger_fraud_alert_notification();

-- Add trigger for updated_at
CREATE TRIGGER update_fraud_alerts_updated_at
    BEFORE UPDATE ON public.fraud_alerts
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Grant permissions
GRANT EXECUTE ON FUNCTION get_fraud_alerts_summary TO authenticated;
GRANT EXECUTE ON FUNCTION create_fraud_alert_notification TO authenticated;

-- Add comments for documentation
COMMENT ON TABLE public.fraud_alerts IS 'Real-time fraud alerts from desktop agent anti-cheat detection system';
COMMENT ON COLUMN public.fraud_alerts.alert_type IS 'Type of suspicious activity detected (mouse_jiggling, keyboard_patterns, etc.)';
COMMENT ON COLUMN public.fraud_alerts.risk_score IS 'Risk score from 0-100 calculated by anti-cheat detector';
COMMENT ON COLUMN public.fraud_alerts.suspicious_patterns IS 'Array of suspicious behavior patterns detected';
COMMENT ON COLUMN public.fraud_alerts.detection_details IS 'Detailed analysis and metrics from the detection algorithm';
COMMENT ON FUNCTION get_fraud_alerts_summary IS 'Gets summary of fraud alerts for monitoring dashboard';
COMMENT ON FUNCTION create_fraud_alert_notification IS 'Creates notifications for high-risk fraud alerts'; 